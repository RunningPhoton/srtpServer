package com.demo.services.impl;

import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import com.demo.database.data.TDemoCircle;
import com.demo.database.data.TDemoCircleMessage;
import com.demo.database.data.TDemoImplCircle;
import com.demo.database.data.TDemoImplMessage;
import com.demo.database.data.TDemoImplUser;
import com.demo.database.data.TDemoMessage;
import com.demo.database.data.TDemoUser;
import com.demo.database.idao.IDaoService;
import com.demo.database.idao.impl.DaoServiceImpl;
import com.demo.services.IUserService;
import com.demo.tools.Tools;


/**
 * 用户操作业务逻辑实现类
 * @author runningphoton
 *
 */
public class UserServiceImpl implements IUserService {
	private IDaoService idaoService;

	public IDaoService getIdaoService() {
		return idaoService;
	}

	public void setIdaoService(IDaoService idaoService) {
		this.idaoService = idaoService;
	}


	/**
	 * 通过userName来找到用户
	 */
	@Override
	public TDemoUser findByUserName(String userName) {
		String hql = "from TDemoUser where userName='"+userName+"'";
		try {
			List<TDemoUser> list = (List<TDemoUser>) idaoService.query(hql);
			if(list != null) 
				return list.get(0);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return null;
	}

	/**
	 * 通过ciecleName来查找circle
	 */
	@Override
	public TDemoCircle findByCircleName(String circleName) {
		String hql = "from TDemoCircle where circleName='" + circleName + "'";
		try {
			List<TDemoCircle> list = (List<TDemoCircle>) idaoService.query(hql);
//			System.out.println(list);
			if(list == null || list.size() == 0) {
				return null;
			}
			return list.get(0);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 用数据库中最新的数据来刷新user
	 */
	@Override
	public void fresh(TDemoUser user) throws Exception {
		user = findByUserName(user.getUserName());
	}

	/**
	 * 添加朋友
	 */
	@Override
	public void addFriend(TDemoUser user, String userName) throws Exception {
		TDemoUser user1 = this.findByUserName(userName);
		user.getUserFriendSet().add(user1);
		user1.getUserBeenFriendSet().add(user);
		idaoService.update(user);
	}

	/**
	 * 删除朋友，传入朋友的用户名
	 */
	@Override
	public void removeFriend(TDemoUser user, String userName) throws Exception {
		TDemoUser user1 = this.findByUserName(userName);
		if(user1 != null) {
//			user.getUserFriendSet().remove(user1);
//			user1.getUserBeenFriendSet().remove(user);
			//System.out.println(user.getUserFriendSet().size());
			
			Iterator iter = user.getUserFriendSet().iterator();
			while(iter.hasNext()) {
				TDemoUser temp = (TDemoUser) iter.next();
				//System.out.println(temp.getUserName() + "    " + user1.getUserName());
				if(temp.equals(user1)) 
					iter.remove();
			}
			//System.out.println(user.getUserFriendSet().size());
			idaoService.update(user);
		}
	}
	
	/**
	 * 创建圈子
	 */
	@Override
	public boolean createCircle(String userId, String circleName, String circleDescribe)
			throws Exception {
		//System.out.println("执行createCircle");
		TDemoCircle circle = this.findByCircleName(circleName);
		//System.out.println("circle = " + circle);
		if(circle == null) {
			circle = new TDemoCircle();
			circle.setCircleMarks(1);
			circle.setCircleName(circleName);
			circle.setOpertime(new Timestamp(System.currentTimeMillis()));
			circle.setCircleDescribe(circleDescribe);
			idaoService.save(circle);
			//System.out.println("执行circle创建完成");
			circle = this.findByCircleName(circle.getCircleName());
			Tools tool = new Tools();
			return tool.createChatRoom(userId, circle.getCircleId().toString(), circle.getCircleName());
		}
		
		return false;
	}
	
	/**
	 * 设置圈子
	 */
	@Override
	public void setCircle(TDemoUser user, String circleName) throws Exception {
		TDemoCircle circle = this.findByCircleName(circleName);
		
		//System.out.println(circle.getCircleName());
//		circle.getUserSet().add(user);
		user.setUserCircle(circle);
//		idaoService.update(circle);
		//System.out.println("执行setCircle");
//		idaoService.update(user);

		//System.out.println("执行setCircle完成");
		Tools tool = new Tools();
		if(tool.addToChatRoom(user.getUserId().toString(), circle.getCircleId().toString())) {
			
			//System.out.println("success add user to circle");
		}
		else {
			//System.out.println("fail add user to circle");
		}
	}

	/**
	 * 移除圈子
	 */
	@Override
	public void removeCircle(TDemoUser user, String circleName) throws Exception {
//		TDemoCircle circle = this.findByCircleName(circleName);
//		circle.getUserSet().remove(user);
//		Iterator iter = circle.getUserSet().iterator();
//		while(iter.hasNext()) {
//			if(iter.next().equals(user)) {
//				iter.remove();
//			}
//		}
//		idaoService.update(circle);
//		user.setUserCircle(null);
//		idaoService.update(user);
//		Tools tool = new Tools();
//		tool.removeUserOfChatRoom(user.getUserId().toString(), circle.getCircleId().toString());
	}
	/**
	 * 向用户发送消息
	 */
	@Override
	public void sendUserMessage(TDemoUser user, String messageContent, String userName)
			throws Exception {
		TDemoMessage message = new TDemoMessage();
		TDemoUser user1 = this.findByUserName(userName);
		message.setMainUser(user);
		message.setInferiorUser(user1);
		message.setOpertime(new Timestamp(System.currentTimeMillis()));
		message.setMessageContent(messageContent);
		user.getUserMessageSendSet().add(message);
		user1.getUserMessageGetSet().add(message);

		idaoService.save(message);
		idaoService.update(user);
		idaoService.update(user1);
	}

	
	/**
	 * 向圈子发送消息
	 */
	@Override
	public void sendCircleMessage(TDemoUser user, String circleMessageContent) throws Exception {
		

		//System.out.println(user.getUserName());
		TDemoCircle circle = this.findByCircleName(user.getUserCircle().getCircleName());
		TDemoCircleMessage circleMessage = new TDemoCircleMessage();
		circleMessage.setCircle(circle);
		circleMessage.setCircleMessageContent(circleMessageContent);
		circleMessage.setOpertime(new Timestamp(System.currentTimeMillis()));
		circleMessage.setUser(user);
		idaoService.save(circleMessage);
		
		Set<TDemoCircleMessage> se = circle.getMessageSet();
		se.add(circleMessage);

		idaoService.update(circle);
	}

	/**
	 * 更新用户信息
	 */
	@Override
	public boolean update(TDemoUser user) {
		
		try {
			idaoService.update(user);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public JSONArray listUserSets(Set<TDemoUser> objSet) throws Exception {
		if(objSet == null) {
			return null;
		}
		Tools tool = new Tools();
		Set<Object> obj = new HashSet<Object>();
		Iterator iter = objSet.iterator();
		while(iter.hasNext()) {
			TDemoUser cur = (TDemoUser) iter.next();
			obj.add(new TDemoImplUser(cur.getUserId(), cur.getUserName(), cur.getUserNickname(), 
					cur.getUserGender(), cur.getUserCollege(), cur.getUserDescribe(), cur.getGraphName(), cur.getUserToken(), 200));
			
		}
		return tool.setToJson(obj);
	}

	@Override
	public JSONArray listMessageSets(Set<TDemoImplMessage> objSet) {
		if(objSet == null) {
			return null;
		}
		Tools tool = new Tools();
		Iterator iter = objSet.iterator();
		Set<Object> obj = new HashSet<Object> ();
		
		while(iter.hasNext()) {
			TDemoImplMessage cur = (TDemoImplMessage) iter.next();
			obj.add(cur);
		}
		return tool.setToJson(obj);
	}

	/**
	 * 展示某用户信息
	 */
	@Override
	public JSONObject listUser(TDemoUser obj) throws Exception {
		if(obj == null)
			return null;
		Tools tool = new Tools();
		TDemoImplUser cur = new TDemoImplUser(obj.getUserId(), obj.getUserName(), obj.getUserNickname(), 
				obj.getUserGender(), obj.getUserCollege(), obj.getUserDescribe(), obj.getGraphName(), obj.getUserToken(), 200);
		cur.print();
		return tool.objectToJson(cur);
	}

	/**
	 * 展示所有circle信息
	 */
	@Override
	public JSONArray listAllCircle() throws Exception {
		String hql = "from TDemoCircle";
		List<TDemoCircle> list = (List<TDemoCircle>) idaoService.query(hql);
		List<Object> temp = new ArrayList<Object>();
		for(int i = 0; i < list.size(); i++) {
			TDemoCircle now = list.get(i);
			temp.add(new TDemoImplCircle(now.getCircleId(), now.getCircleName(), 
					now.getUserSet().size(), now.getOpertime(), now.getCircleMarks(), now.getGraphName(), 200));
		}
		Tools tool = new Tools();
		return tool.listToJson(temp);
	}

	/**
	 * 展示用户circle信息，null表示未添加任何circle
	 */
	@Override
	public JSONObject listMyCircle(TDemoUser user) throws Exception {
		if(user == null)
			return null;
		TDemoCircle circle = user.getUserCircle();
		TDemoImplCircle cur = new TDemoImplCircle(circle.getCircleId(), circle.getCircleName(), 
				circle.getUserSet().size(), circle.getOpertime(), circle.getCircleMarks(), circle.getGraphName(), 200);
		Tools tool = new Tools();
		return tool.objectToJson(cur);
	}

	@Override
	public JSONObject listMyCircle(String circleName) throws Exception {
		// TODO Auto-generated method stub
		TDemoCircle circle = findByCircleName(circleName);
		TDemoImplCircle cur = new TDemoImplCircle(circle.getCircleId(), circle.getCircleName(), 
				circle.getUserSet().size(), circle.getOpertime(), circle.getCircleMarks(), circle.getGraphName(), 200);
		Tools tool = new Tools();
		return tool.objectToJson(cur);
	}

}
